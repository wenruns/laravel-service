<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2020/6/19
 * Time: 10:34
 */

namespace WenRuns\Laravel\Admin\Form\Field;


use Encore\Admin\Form;
use Encore\Admin\Form\Field;

class Tabs extends Field
{
    protected $view = 'WenAdmin::form.tabs';

    protected $_tabs = [];

    protected $_clickEventFunc = '';

    protected $fieldName = '';

    protected $_max_height = '100%';

    protected $_max_width = '100%';

    protected $_min_height = '100%';

    protected $_min_width = '100%';


    public function __construct($column = '', array $arguments = [])
    {
        parent::__construct($column, $arguments);
    }

    public function getViewElementClasses(): array
    {
        if ($this->horizontal) {
            return [
                'label'      => "col-sm-{$this->width['label']} {$this->getLabelClass()}",
                'field'      => "col-sm-{$this->width['field']}",
                'form-group' => $this->getGroupClass(true),
            ];
        }
        return ['label' => $this->getLabelClass(), 'field' => '', 'form-group' => ''];
    }




    /**
     * @param array $arguments
     * @return string
     */
    public function formatLabel($arguments = []): string
    {
        if (isset($arguments[0]) && is_callable($arguments[0])) {
            $column = is_array($this->column) ? current($this->column) : $this->column;
            $this->_tabs[] = [
                'tabName' => $column,
                'closure' => $arguments[0],
            ];
            return ucfirst($column);
        } else {
            return parent::formatLabel($arguments); // TODO: Change the autogenerated stub
        }
    }

    /**
     * @param $fieldName
     * @return $this
     */
    public function setFieldName($fieldName)
    {
        $this->fieldName = $fieldName;
        return $this;
    }

    /**
     * @param $eventFun
     * @return $this
     */
    public function clickEvent($eventFun)
    {
        $this->_clickEventFunc = $eventFun;
        return $this;
    }

    /**
     * @param $title
     * @param \Closure $closure
     * @return $this
     */
    public function addTab($title, \Closure $closure)
    {
        $this->_tabs[] = [
            'tabName' => $title,
            'closure' => $closure,
        ];
        return $this;
    }

    /**
     * 设置最大宽高
     * @param $width
     * @param $height
     * @return $this
     */
    public function max($width, $height)
    {
        $this->_max_height = $height;
        $this->_max_width = $width;
        return $this;
    }

    /**
     * 设置最新宽高
     * @param $width
     * @param $height
     * @return $this
     */
    public function min($width, $height)
    {
        $this->_min_height = $height;
        $this->_min_width = $width;
        return $this;
    }

    /**
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View|string
     */
    public function render()
    {
//        dd($this, $this->data);
        $tabs = [];
        $activeTab = '';
        $activeClass = '';
        $id = $this->form->model()->getKey();
        foreach ($this->_tabs as $k => $tab) {
            $form = new Form($this->form->model());
            $closure = $tab['closure'];
            call_user_func($closure, $form);
            if ($id) {
                $form->edit($id);
            }
            $content = $form->render();
            $reg = '/<form[^>]*>([\s\S]*)<div\s*class="box-footer"\s*>/';
            preg_match($reg, $content, $result);
            $tabs[] = [
                'tabName' => $tab['tabName'],
                'content' => $result[1] ?? '',
                'class'   => md5($tab['tabName']),
            ];
            if ($k == 0) {
                $activeTab = $tab['tabName'];
                $activeClass = md5($tab['tabName']);
            }
        }
//        dd($this->variables());
        $this->addVariables([
            'tabs'        => $tabs,
            'activeTab'   => $activeTab,
            'activeClass' => $activeClass,
            'eventFunc'   => $this->_clickEventFunc,
            'fieldName'   => $this->fieldName,
            'maxHeight'   => $this->_max_height,
            'maxWidth'    => $this->_max_width,
            'minHeight'   => $this->_min_height,
            'minWidth'    => $this->_min_width,
        ]);
        return parent::render(); // TODO: Change the autogenerated stub
    }


}
